This is class 5th of nodejs

1 npm init -y
2 install dependancies

Mongoose is a driver for mongodb

mongodb -> mongoshell commands inject 
string templating 



mongoose has a lot of functions that implement mongodb queries
mongoose also lets us connect our database easily using an async function

Steps to connect to database
1. npm i mongoose
2. database URI
3. mongooose.connect(database_uri)
    .then(()=>{console.log("db connected")})
    .catch((err)=>console.log(err));



1. connect to cloud database

step 1  create a new project on moongodb atlas
add the project name
add the server choice
initialises


step 2 go to clusters, then click on connect and follow the steps

step 3 paste the connection URI in your project

const clouddburl = mongodb+srv://vverma971:<db_password>@cluster0.hwin2.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0


mongoose.connect(clouddburl)
.then(()=>{
    console.log("Connected to MongoDB");
})
.catch((err)=>{
    console.log(err);
})



step 4 Create mongoose model


-------------------------------------------------------------------------------

step 1 create the server project  -express, middlewares, routing, mvc structure
step 2 connect to the database 
step 3 data validation -> make sure that our database is uniform and avoids any conflict 
                        -> to avoid any data mis-interpretation 
                        > Authentication process should be well defined and smooth

    Schema Validation -> defining what format of data will be stored on the db 

    Schema is the format of data that we collect 
    Implementation : We model the data using mongoose to implement schema validation

    Middleware Validation -> using a middleware 
                        -> only required data reaches the user
                        -> there is no leakage of data
                        -> security measures 
    Implemenation -> we use jwt (jsonwebtoken) to authenticate the users based on their credentials 



    Prooduction Level API

    1- The API is Error Free 
    2- The data interaction should be validated
    3- Very Very Secure!
    4- Deployed with encrypted keys (Security)



    Validation Steps

    1. Moongoose Schema
    2. Defined what fields of information would be there, along with their configurations
    3. Created a user model based on the schema, and exported it as an object


    Security :

    1. Client side ip addresses restrict
    2. Encrypt the passwords
    3. Token Based Authentication



    Client ---------||----Server-----||-----------DB


    Hackers Attack -> DB Query Injection 
    DLL Injection -> Dyanmic Library Injection 
    API Request -> body {
        dll
    }



    Ecmmerce API -> Payment Api 
    {
        user:username,
        phone:974074073,
        amount:1906,
        status:pending
    }

{
    status:paid
}


authentication : information 


Payment Gateway
Authentication
Forgot Password



CORS -> Cross Origin Resource Policy
 
 That helps us define which clients would be served using our API

 1. npm i cors
 2. const cors = require("cors");
 

CORS is used as a middleware
Stateless - we dont store any data on server
Any API call, that comes to our server, should have enough information for it to be responded 


RESTful API 
Representational State Transfer API 


Stateless -> body, header 
HTTPS Methods -> GET, POST, PUT, DELETE
use less bandwith -> JSON 
Security -> COORS JWT Password
MVC -> Code on Demand 


Client ------------> API  --------------> Server 




FULLSTACK PROJECT


Front End                                      Backend 
Vishoo's Social                                Vishoo's Backend
Media 


API Structured

header{
    request configuration
}
body{
    user information
}


Content-Type:application/json

Authorization, security etc

Stateless -> secruity cookies, tokens 

Cookies-> Authentication, storing preferences, restoring form information 

const corsOptions = {
    origin: "*",
    methods: "GET, POST",
    // allowedHeaders: "Content-Type",
    // optionsSuccessStatus: 200
    Credentials:true,
    // preflightContinue:true -> this would pass these options listed above to the next middleware 
}


Encrypt the password 

user created------>info is validated ------> stored in the database 
post /users --------> mongoose ---->hash the password ---------> user.create(req.body);

bcrypt - package that helps us encrypt user passwords

API Authentication using JWT

1. npm i jsonwebtoken
2. create auth.js file in middleware
3. To generate Token we use jwt.sign()

jwt.sign() is a predefined method, that generate the token during
login and signup routes


token -> header, payload, signature
payload-> which data would be used to identify a user
Token_secret -> this is a custom key that we use as salt to better
encrypt our token
properties: expiresIn, algorithm, issuer


4. in the routs, we'll first extract the payload
5. Generate Token using the payload 


Authenticating Token

1. extract the token
2. check for Error
3. jwt.verify -> a prebuilt method to verify tokens, along with the secret keys
4. middleware in the routes that we want to protect